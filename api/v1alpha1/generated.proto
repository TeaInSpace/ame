/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package teainspace.com.ame.pkg.apis.ame.v1alpha1;

import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// A PipelineStep is essentially a duplicated of the TaskSpec, which represents each step in a pipeline.
// Due to limitations with the current tooling used for generated manifests from the types in this file,
// we can't have recursive types and therefore we need this duplicated for now. See issue 43.
message PipelineStep {
  // TaskName is the name of the task represented by this step.
  optional string taskname = 1;

  // The command AME will use to execute the Task.
  // The command must be runnable from a bash shell.
  optional string runcommand = 2;

  // Environment variables that will be made avaialbe to the Task during execution.
  repeated TaskEnvVar env = 3;

  // Secrets that will be made available to the Task during execution.
  repeated TaskSecret secrets = 4;
}

// A ProjectSource describes where AME will fetch the project from.
// This can either be a Git repository + reference or a path within
// AME's object storage.
// Note that if the Git related fields are non empty then the AmeStoreagePath should
// not be used and vice versa.
message ProjectSource {
  // GitRepository should point to the git repo containing the Task's project.
  optional string gitRepository = 1;

  // GitReference contains the reference which will be checked out from within the Git repository.
  optional string gitReference = 2;

  // AmeStoragePath defines the path within AME's object storage where the Project should be copied from.
  optional string ameStoragePath = 3;
}

// ReccurringTask is the Schema for the reccurringtasks API
message ReccurringTask {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ReccurringTaskSpec spec = 2;

  optional ReccurringTaskStatus status = 3;
}

// ReccurringTaskList contains a list of ReccurringTask
message ReccurringTaskList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ReccurringTask items = 2;
}

// ReccurringTaskSpec defines the desired state of ReccurringTask
message ReccurringTaskSpec {
  // TaskRef references a Task by name.
  optional TaskSpec taskSpec = 1;

  // Cron schedule used for scheduling Task execution.
  optional string schedule = 2;
}

// ReccurringTaskStatus defines the observed state of ReccurringTask
message ReccurringTaskStatus {
}

// Task is the Schema for the tasks API
message Task {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional TaskSpec spec = 2;

  optional TaskStatus status = 3;
}

// A TaskEnvVar represents an environment variable
// made available to a task during execution.
message TaskEnvVar {
  optional string name = 1;

  optional string value = 2;
}

// TaskList contains a list of Task
message TaskList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Task items = 2;
}

// A TaskSecret represnts a secret identified by the Name which
// will be injected into the Task's execution as an environment
// variable with EnvKey as the key.
message TaskSecret {
  optional string name = 1;

  optional string envkey = 2;
}

// TaskSpec defines the desired state of Task
message TaskSpec {
  // The command AME will use to execute the Task.
  // The command must be runnable from a bash shell.
  // TODO: define propper requirements for the run command.
  optional string runcommand = 1;

  // A unique identifier for the project wich the Task will
  // be running based on.
  optional string projectid = 2;

  // Environment variables that will be made avaialbe to the Task during execution.
  repeated TaskEnvVar env = 3;

  // Secrets that will be made available to the Task during execution.
  repeated TaskSecret secrets = 4;

  // Pipeline defines a sequence of tasks to execute.
  // If a pipeline is specified the rest of the fields in this
  // specification are ignored.
  repeated PipelineStep pipeline = 5;

  // source defines where AME will pull the project from.
  // This can either be AME's own object storage or a git repository.
  optional ProjectSource source = 6;

  // Resources define what resources this Task requires.
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> resources = 7;
}

// TaskStatus defines the observed state of Task
message TaskStatus {
  // INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
  // Important: Run "make" to regenerate code after modifying this file
  optional string phase = 1;

  // Reason describes why the Task has the current status.
  optional string reason = 2;
}

