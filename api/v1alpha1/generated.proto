/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package teainspace.com.ame.pkg.apis.ame.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Task is the Schema for the tasks API
message Task {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional TaskSpec spec = 2;

  optional TaskStatus status = 3;
}

// A TaskEnvVar represents an environment variable
// made available to a task during execution.
message TaskEnvVar {
  optional string name = 1;

  optional string value = 2;
}

// TaskList contains a list of Task
message TaskList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Task items = 2;
}

// A TaskSecret represnts a secret identified by the Name which
// will be injected into the Task's execution as an environment
// variable with EnvKey as the key.
message TaskSecret {
  optional string namw = 1;

  optional string envkey = 2;
}

// TaskSpec defines the desired state of Task
message TaskSpec {
  // The command AME will use to execute the Task.
  // The command must be runnable from a bash shell.
  // TODO: define propper requirements for the run command.
  optional string runcommand = 1;

  // A unique identifier for the project wich the Task will
  // be running based on.
  optional string projectid = 2;

  // Environment variables that will be made avaialbe to the Task during execution.
  repeated TaskEnvVar env = 3;

  // Secrets that will be made available to the task during execution.
  repeated TaskSecret secrets = 4;
}

// TaskStatus defines the observed state of Task
message TaskStatus {
}

