apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: tasks.ame.teainspace.com
spec:
  group: ame.teainspace.com
  names:
    categories: []
    kind: Task
    plural: tasks
    shortNames:
    - task
    singular: task
  scope: Namespaced
  versions:
  - additionalPrinterColumns: []
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Auto-generated derived type for TaskSpec via `CustomResource`
        properties:
          spec:
            properties:
              dataSet:
                items:
                  type: string
                nullable: true
                type: array
              env:
                items:
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                  required:
                  - name
                  - value
                  type: object
                nullable: true
                type: array
              image:
                nullable: true
                type: string
              name:
                nullable: true
                type: string
              pipeline:
                items:
                  properties:
                    env:
                      items:
                        properties:
                          name:
                            type: string
                          value:
                            type: string
                        required:
                        - name
                        - value
                        type: object
                      type: array
                    runcommand:
                      type: string
                    secrets:
                      items:
                        oneOf:
                        - required:
                          - AmeSecret
                        - required:
                          - VaultSecret
                        properties:
                          AmeSecret:
                            properties:
                              envkey:
                                type: string
                              name:
                                type: string
                            required:
                            - envkey
                            - name
                            type: object
                          VaultSecret:
                            properties:
                              envkey:
                                type: string
                              secretKey:
                                type: string
                              secretPath:
                                type: string
                              vaultName:
                                type: string
                            required:
                            - envkey
                            - secretKey
                            - secretPath
                            - vaultName
                            type: object
                        type: object
                      type: array
                    taskname:
                      type: string
                  required:
                  - env
                  - runcommand
                  - secrets
                  - taskname
                  type: object
                nullable: true
                type: array
              projectid:
                nullable: true
                type: string
              resources:
                additionalProperties:
                  description: |-
                    Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                    The serialization format is:

                    <quantity>        ::= <signedNumber><suffix>
                      (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                    <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                      (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                    <decimalSI>       ::= m | "" | k | M | G | T | P | E
                      (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                    <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                    No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                    When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                    Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                      a. No precision is lost
                      b. No fractional digits will be emitted
                      c. The exponent (or suffix) is as large as possible.
                    The sign will be omitted unless the number is negative.

                    Examples:
                      1.5 will be serialized as "1500m"
                      1.5Gi will be serialized as "1536Mi"

                    Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                    Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                    This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                  type: string
                nullable: true
                type: object
              runcommand:
                nullable: true
                type: string
              secrets:
                items:
                  oneOf:
                  - required:
                    - AmeSecret
                  - required:
                    - VaultSecret
                  properties:
                    AmeSecret:
                      properties:
                        envkey:
                          type: string
                        name:
                          type: string
                      required:
                      - envkey
                      - name
                      type: object
                    VaultSecret:
                      properties:
                        envkey:
                          type: string
                        secretKey:
                          type: string
                        secretPath:
                          type: string
                        vaultName:
                          type: string
                      required:
                      - envkey
                      - secretKey
                      - secretPath
                      - vaultName
                      type: object
                  type: object
                nullable: true
                type: array
              source:
                nullable: true
                properties:
                  amestoragepath:
                    nullable: true
                    type: string
                  gitreference:
                    nullable: true
                    type: string
                  gitrepository:
                    nullable: true
                    type: string
                type: object
              taskRef:
                nullable: true
                type: string
              taskType:
                enum:
                - PipEnv
                - Mlflow
                - Poetry
                nullable: true
                type: string
              templateRef:
                nullable: true
                type: string
            type: object
          status:
            description: The status object of `Task`
            nullable: true
            properties:
              data_set_tasks:
                additionalProperties:
                  properties:
                    phase:
                      enum:
                      - Running
                      - Pending
                      - Failed
                      - Succeeded
                      - Error
                      type: string
                  required:
                  - phase
                  type: object
                nullable: true
                type: object
              phase:
                enum:
                - Running
                - Pending
                - Failed
                - Succeeded
                - Error
                nullable: true
                type: string
              reason:
                nullable: true
                type: string
            type: object
        required:
        - spec
        title: Task
        type: object
    served: true
    storage: true
    subresources:
      status: {}
