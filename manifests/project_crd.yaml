apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: projects.ame.teainspace.com
spec:
  group: ame.teainspace.com
  names:
    categories: []
    kind: Project
    plural: projects
    shortNames:
    - proj
    singular: project
  scope: Namespaced
  versions:
  - additionalPrinterColumns: []
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Auto-generated derived type for ProjectSpec via `CustomResource`
        properties:
          spec:
            properties:
              logEntry:
                nullable: true
                properties:
                  contents:
                    items:
                      format: uint8
                      minimum: 0.0
                      type: integer
                    type: array
                required:
                - contents
                type: object
              models:
                items:
                  properties:
                    deployment:
                      nullable: true
                      properties:
                        auto_train:
                          type: boolean
                        deploy:
                          type: boolean
                        enable_tls:
                          nullable: true
                          type: boolean
                        image:
                          nullable: true
                          type: string
                        ingress:
                          description: Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
                          nullable: true
                          properties:
                            apiVersion:
                              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                              type: string
                            kind:
                              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            metadata:
                              description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                                  type: object
                                clusterName:
                                  description: The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
                                  type: string
                                creationTimestamp:
                                  description: |-
                                    CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

                                    Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                                  format: date-time
                                  type: string
                                deletionGracePeriodSeconds:
                                  description: Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
                                  format: int64
                                  type: integer
                                deletionTimestamp:
                                  description: |-
                                    DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

                                    Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                                  format: date-time
                                  type: string
                                finalizers:
                                  description: Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
                                  items:
                                    type: string
                                  type: array
                                generateName:
                                  description: |-
                                    GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

                                    If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).

                                    Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
                                  type: string
                                generation:
                                  description: A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
                                  format: int64
                                  type: integer
                                labels:
                                  additionalProperties:
                                    type: string
                                  description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
                                  type: object
                                managedFields:
                                  description: ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
                                  items:
                                    description: ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
                                    properties:
                                      apiVersion:
                                        description: APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
                                        type: string
                                      fieldsType:
                                        description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"'
                                        type: string
                                      fieldsV1:
                                        description: FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
                                        type: object
                                      manager:
                                        description: Manager is an identifier of the workflow managing these fields.
                                        type: string
                                      operation:
                                        description: Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
                                        type: string
                                      subresource:
                                        description: Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
                                        type: string
                                      time:
                                        description: Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
                                        format: date-time
                                        type: string
                                    type: object
                                  type: array
                                name:
                                  description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                  type: string
                                namespace:
                                  description: |-
                                    Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

                                    Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
                                  type: string
                                ownerReferences:
                                  description: List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
                                  items:
                                    description: OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
                                    properties:
                                      apiVersion:
                                        description: API version of the referent.
                                        type: string
                                      blockOwnerDeletion:
                                        description: If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
                                        type: boolean
                                      controller:
                                        description: If true, this reference points to the managing controller.
                                        type: boolean
                                      kind:
                                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                        type: string
                                      uid:
                                        description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                                        type: string
                                    required:
                                    - apiVersion
                                    - kind
                                    - name
                                    - uid
                                    type: object
                                  type: array
                                resourceVersion:
                                  description: |-
                                    An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

                                    Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                                  type: string
                                selfLink:
                                  description: |-
                                    SelfLink is a URL representing this object. Populated by the system. Read-only.

                                    DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
                                  type: string
                                uid:
                                  description: |-
                                    UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

                                    Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
                                  type: string
                              type: object
                            spec:
                              description: 'Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                              properties:
                                defaultBackend:
                                  description: DefaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
                                  properties:
                                    resource:
                                      description: Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
                                      properties:
                                        apiGroup:
                                          description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                          type: string
                                        kind:
                                          description: Kind is the type of resource being referenced
                                          type: string
                                        name:
                                          description: Name is the name of resource being referenced
                                          type: string
                                      required:
                                      - kind
                                      - name
                                      type: object
                                    service:
                                      description: Service references a Service as a Backend. This is a mutually exclusive setting with "Resource".
                                      properties:
                                        name:
                                          description: Name is the referenced service. The service must exist in the same namespace as the Ingress object.
                                          type: string
                                        port:
                                          description: Port of the referenced service. A port name or port number is required for a IngressServiceBackend.
                                          properties:
                                            name:
                                              description: Name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
                                              type: string
                                            number:
                                              description: Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
                                              format: int32
                                              type: integer
                                          type: object
                                      required:
                                      - name
                                      type: object
                                  type: object
                                ingressClassName:
                                  description: IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
                                  type: string
                                rules:
                                  description: A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
                                  items:
                                    description: IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
                                    properties:
                                      host:
                                        description: "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nHost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule."
                                        type: string
                                      http:
                                        description: 'HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last ''/'' and before the first ''?'' or ''#''.'
                                        properties:
                                          paths:
                                            description: A collection of paths that map requests to backends.
                                            items:
                                              description: HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
                                              properties:
                                                backend:
                                                  description: Backend defines the referenced service endpoint to which the traffic will be forwarded to.
                                                  properties:
                                                    resource:
                                                      description: Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
                                                      properties:
                                                        apiGroup:
                                                          description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                                                          type: string
                                                        kind:
                                                          description: Kind is the type of resource being referenced
                                                          type: string
                                                        name:
                                                          description: Name is the name of resource being referenced
                                                          type: string
                                                      required:
                                                      - kind
                                                      - name
                                                      type: object
                                                    service:
                                                      description: Service references a Service as a Backend. This is a mutually exclusive setting with "Resource".
                                                      properties:
                                                        name:
                                                          description: Name is the referenced service. The service must exist in the same namespace as the Ingress object.
                                                          type: string
                                                        port:
                                                          description: Port of the referenced service. A port name or port number is required for a IngressServiceBackend.
                                                          properties:
                                                            name:
                                                              description: Name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
                                                              type: string
                                                            number:
                                                              description: Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
                                                              format: int32
                                                              type: integer
                                                          type: object
                                                      required:
                                                      - name
                                                      type: object
                                                  type: object
                                                path:
                                                  description: Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
                                                  type: string
                                                pathType:
                                                  description: |-
                                                    PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
                                                      done on a path element by element basis. A path element refers is the
                                                      list of labels in the path split by the '/' separator. A request is a
                                                      match for path p if every p is an element-wise prefix of p of the
                                                      request path. Note that if the last element of the path is a substring
                                                      of the last element in request path, it is not a match (e.g. /foo/bar
                                                      matches /foo/bar/baz, but does not match /foo/barbaz).
                                                    * ImplementationSpecific: Interpretation of the Path matching is up to
                                                      the IngressClass. Implementations can treat this as a separate PathType
                                                      or treat it identically to Prefix or Exact path types.
                                                    Implementations are required to support all path types.
                                                  type: string
                                              required:
                                              - backend
                                              - pathType
                                              type: object
                                            type: array
                                        required:
                                        - paths
                                        type: object
                                    type: object
                                  type: array
                                tls:
                                  description: TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
                                  items:
                                    description: IngressTLS describes the transport layer security associated with an Ingress.
                                    properties:
                                      hosts:
                                        description: Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
                                        items:
                                          type: string
                                        type: array
                                      secretName:
                                        description: SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
                                        type: string
                                    type: object
                                  type: array
                              type: object
                            status:
                              description: 'Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                              properties:
                                loadBalancer:
                                  description: LoadBalancer contains the current status of the load-balancer.
                                  properties:
                                    ingress:
                                      description: Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
                                      items:
                                        description: 'LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.'
                                        properties:
                                          hostname:
                                            description: Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
                                            type: string
                                          ip:
                                            description: IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
                                            type: string
                                          ports:
                                            description: Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
                                            items:
                                              properties:
                                                error:
                                                  description: |-
                                                    Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
                                                      CamelCase names
                                                    - cloud provider specific error values must have names that comply with the
                                                      format foo.example.com/CamelCase.
                                                  type: string
                                                port:
                                                  description: Port is the port number of the service port of which status is recorded here
                                                  format: int32
                                                  type: integer
                                                protocol:
                                                  description: |+
                                                    Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"

                                                  type: string
                                              required:
                                              - port
                                              - protocol
                                              type: object
                                            type: array
                                        type: object
                                      type: array
                                  type: object
                              type: object
                          required:
                          - metadata
                          type: object
                        ingress_annotations:
                          additionalProperties:
                            type: string
                          nullable: true
                          type: object
                        replicas:
                          format: int32
                          nullable: true
                          type: integer
                        resources:
                          description: ResourceRequirements describes the compute resource requirements.
                          nullable: true
                          properties:
                            limits:
                              additionalProperties:
                                description: |-
                                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                  The serialization format is:

                                  <quantity>        ::= <signedNumber><suffix>
                                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                    a. No precision is lost
                                    b. No fractional digits will be emitted
                                    c. The exponent (or suffix) is as large as possible.
                                  The sign will be omitted unless the number is negative.

                                  Examples:
                                    1.5 will be serialized as "1500m"
                                    1.5Gi will be serialized as "1536Mi"

                                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                type: string
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                            requests:
                              additionalProperties:
                                description: |-
                                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                  The serialization format is:

                                  <quantity>        ::= <signedNumber><suffix>
                                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                    a. No precision is lost
                                    b. No fractional digits will be emitted
                                    c. The exponent (or suffix) is as large as possible.
                                  The sign will be omitted unless the number is negative.

                                  Examples:
                                    1.5 will be serialized as "1500m"
                                    1.5Gi will be serialized as "1536Mi"

                                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                type: string
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                          type: object
                      required:
                      - auto_train
                      - deploy
                      type: object
                    modelType:
                      enum:
                      - Mlflow
                      nullable: true
                      type: string
                    name:
                      type: string
                    training:
                      properties:
                        schedule:
                          nullable: true
                          type: string
                        task:
                          properties:
                            env:
                              items:
                                properties:
                                  name:
                                    type: string
                                  value:
                                    type: string
                                required:
                                - name
                                - value
                                type: object
                              nullable: true
                              type: array
                            image:
                              nullable: true
                              type: string
                            name:
                              nullable: true
                              type: string
                            pipeline:
                              items:
                                properties:
                                  env:
                                    items:
                                      properties:
                                        name:
                                          type: string
                                        value:
                                          type: string
                                      required:
                                      - name
                                      - value
                                      type: object
                                    type: array
                                  runcommand:
                                    type: string
                                  secrets:
                                    items:
                                      oneOf:
                                      - required:
                                        - AmeSecret
                                      - required:
                                        - VaultSecret
                                      properties:
                                        AmeSecret:
                                          properties:
                                            envkey:
                                              type: string
                                            name:
                                              type: string
                                          required:
                                          - envkey
                                          - name
                                          type: object
                                        VaultSecret:
                                          properties:
                                            envkey:
                                              type: string
                                            secretKey:
                                              type: string
                                            secretPath:
                                              type: string
                                            vaultName:
                                              type: string
                                          required:
                                          - envkey
                                          - secretKey
                                          - secretPath
                                          - vaultName
                                          type: object
                                      type: object
                                    type: array
                                  taskname:
                                    type: string
                                required:
                                - env
                                - runcommand
                                - secrets
                                - taskname
                                type: object
                              nullable: true
                              type: array
                            projectid:
                              nullable: true
                              type: string
                            resources:
                              additionalProperties:
                                description: |-
                                  Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                                  The serialization format is:

                                  <quantity>        ::= <signedNumber><suffix>
                                    (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                                  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                                  <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                                  <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                                  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                                  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                                  Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                    a. No precision is lost
                                    b. No fractional digits will be emitted
                                    c. The exponent (or suffix) is as large as possible.
                                  The sign will be omitted unless the number is negative.

                                  Examples:
                                    1.5 will be serialized as "1500m"
                                    1.5Gi will be serialized as "1536Mi"

                                  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                                  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                                  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                                type: string
                              nullable: true
                              type: object
                            runcommand:
                              nullable: true
                              type: string
                            secrets:
                              items:
                                oneOf:
                                - required:
                                  - AmeSecret
                                - required:
                                  - VaultSecret
                                properties:
                                  AmeSecret:
                                    properties:
                                      envkey:
                                        type: string
                                      name:
                                        type: string
                                    required:
                                    - envkey
                                    - name
                                    type: object
                                  VaultSecret:
                                    properties:
                                      envkey:
                                        type: string
                                      secretKey:
                                        type: string
                                      secretPath:
                                        type: string
                                      vaultName:
                                        type: string
                                    required:
                                    - envkey
                                    - secretKey
                                    - secretPath
                                    - vaultName
                                    type: object
                                type: object
                              nullable: true
                              type: array
                            source:
                              nullable: true
                              properties:
                                amestoragepath:
                                  nullable: true
                                  type: string
                                gitreference:
                                  nullable: true
                                  type: string
                                gitrepository:
                                  nullable: true
                                  type: string
                              type: object
                            taskRef:
                              nullable: true
                              type: string
                            taskType:
                              enum:
                              - PipEnv
                              - Mlflow
                              nullable: true
                              type: string
                            templateRef:
                              nullable: true
                              type: string
                          type: object
                      required:
                      - task
                      type: object
                    validationTask:
                      nullable: true
                      properties:
                        env:
                          items:
                            properties:
                              name:
                                type: string
                              value:
                                type: string
                            required:
                            - name
                            - value
                            type: object
                          nullable: true
                          type: array
                        image:
                          nullable: true
                          type: string
                        name:
                          nullable: true
                          type: string
                        pipeline:
                          items:
                            properties:
                              env:
                                items:
                                  properties:
                                    name:
                                      type: string
                                    value:
                                      type: string
                                  required:
                                  - name
                                  - value
                                  type: object
                                type: array
                              runcommand:
                                type: string
                              secrets:
                                items:
                                  oneOf:
                                  - required:
                                    - AmeSecret
                                  - required:
                                    - VaultSecret
                                  properties:
                                    AmeSecret:
                                      properties:
                                        envkey:
                                          type: string
                                        name:
                                          type: string
                                      required:
                                      - envkey
                                      - name
                                      type: object
                                    VaultSecret:
                                      properties:
                                        envkey:
                                          type: string
                                        secretKey:
                                          type: string
                                        secretPath:
                                          type: string
                                        vaultName:
                                          type: string
                                      required:
                                      - envkey
                                      - secretKey
                                      - secretPath
                                      - vaultName
                                      type: object
                                  type: object
                                type: array
                              taskname:
                                type: string
                            required:
                            - env
                            - runcommand
                            - secrets
                            - taskname
                            type: object
                          nullable: true
                          type: array
                        projectid:
                          nullable: true
                          type: string
                        resources:
                          additionalProperties:
                            description: |-
                              Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                              The serialization format is:

                              <quantity>        ::= <signedNumber><suffix>
                                (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                              <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                                (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                              <decimalSI>       ::= m | "" | k | M | G | T | P | E
                                (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                              <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                              No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                              When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                              Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                                a. No precision is lost
                                b. No fractional digits will be emitted
                                c. The exponent (or suffix) is as large as possible.
                              The sign will be omitted unless the number is negative.

                              Examples:
                                1.5 will be serialized as "1500m"
                                1.5Gi will be serialized as "1536Mi"

                              Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                              Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                              This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                            type: string
                          nullable: true
                          type: object
                        runcommand:
                          nullable: true
                          type: string
                        secrets:
                          items:
                            oneOf:
                            - required:
                              - AmeSecret
                            - required:
                              - VaultSecret
                            properties:
                              AmeSecret:
                                properties:
                                  envkey:
                                    type: string
                                  name:
                                    type: string
                                required:
                                - envkey
                                - name
                                type: object
                              VaultSecret:
                                properties:
                                  envkey:
                                    type: string
                                  secretKey:
                                    type: string
                                  secretPath:
                                    type: string
                                  vaultName:
                                    type: string
                                required:
                                - envkey
                                - secretKey
                                - secretPath
                                - vaultName
                                type: object
                            type: object
                          nullable: true
                          type: array
                        source:
                          nullable: true
                          properties:
                            amestoragepath:
                              nullable: true
                              type: string
                            gitreference:
                              nullable: true
                              type: string
                            gitrepository:
                              nullable: true
                              type: string
                          type: object
                        taskRef:
                          nullable: true
                          type: string
                        taskType:
                          enum:
                          - PipEnv
                          - Mlflow
                          nullable: true
                          type: string
                        templateRef:
                          nullable: true
                          type: string
                      type: object
                  required:
                  - name
                  - training
                  type: object
                nullable: true
                type: array
              projectid:
                type: string
              tasks:
                items:
                  properties:
                    env:
                      items:
                        properties:
                          name:
                            type: string
                          value:
                            type: string
                        required:
                        - name
                        - value
                        type: object
                      nullable: true
                      type: array
                    image:
                      nullable: true
                      type: string
                    name:
                      nullable: true
                      type: string
                    pipeline:
                      items:
                        properties:
                          env:
                            items:
                              properties:
                                name:
                                  type: string
                                value:
                                  type: string
                              required:
                              - name
                              - value
                              type: object
                            type: array
                          runcommand:
                            type: string
                          secrets:
                            items:
                              oneOf:
                              - required:
                                - AmeSecret
                              - required:
                                - VaultSecret
                              properties:
                                AmeSecret:
                                  properties:
                                    envkey:
                                      type: string
                                    name:
                                      type: string
                                  required:
                                  - envkey
                                  - name
                                  type: object
                                VaultSecret:
                                  properties:
                                    envkey:
                                      type: string
                                    secretKey:
                                      type: string
                                    secretPath:
                                      type: string
                                    vaultName:
                                      type: string
                                  required:
                                  - envkey
                                  - secretKey
                                  - secretPath
                                  - vaultName
                                  type: object
                              type: object
                            type: array
                          taskname:
                            type: string
                        required:
                        - env
                        - runcommand
                        - secrets
                        - taskname
                        type: object
                      nullable: true
                      type: array
                    projectid:
                      nullable: true
                      type: string
                    resources:
                      additionalProperties:
                        description: |-
                          Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                          The serialization format is:

                          <quantity>        ::= <signedNumber><suffix>
                            (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                          <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                            (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                          <decimalSI>       ::= m | "" | k | M | G | T | P | E
                            (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                          <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                          No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                          When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                          Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                            a. No precision is lost
                            b. No fractional digits will be emitted
                            c. The exponent (or suffix) is as large as possible.
                          The sign will be omitted unless the number is negative.

                          Examples:
                            1.5 will be serialized as "1500m"
                            1.5Gi will be serialized as "1536Mi"

                          Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                          Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                          This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                        type: string
                      nullable: true
                      type: object
                    runcommand:
                      nullable: true
                      type: string
                    secrets:
                      items:
                        oneOf:
                        - required:
                          - AmeSecret
                        - required:
                          - VaultSecret
                        properties:
                          AmeSecret:
                            properties:
                              envkey:
                                type: string
                              name:
                                type: string
                            required:
                            - envkey
                            - name
                            type: object
                          VaultSecret:
                            properties:
                              envkey:
                                type: string
                              secretKey:
                                type: string
                              secretPath:
                                type: string
                              vaultName:
                                type: string
                            required:
                            - envkey
                            - secretKey
                            - secretPath
                            - vaultName
                            type: object
                        type: object
                      nullable: true
                      type: array
                    source:
                      nullable: true
                      properties:
                        amestoragepath:
                          nullable: true
                          type: string
                        gitreference:
                          nullable: true
                          type: string
                        gitrepository:
                          nullable: true
                          type: string
                      type: object
                    taskRef:
                      nullable: true
                      type: string
                    taskType:
                      enum:
                      - PipEnv
                      - Mlflow
                      nullable: true
                      type: string
                    templateRef:
                      nullable: true
                      type: string
                  type: object
                nullable: true
                type: array
              templates:
                items:
                  properties:
                    env:
                      items:
                        properties:
                          name:
                            type: string
                          value:
                            type: string
                        required:
                        - name
                        - value
                        type: object
                      nullable: true
                      type: array
                    image:
                      nullable: true
                      type: string
                    name:
                      nullable: true
                      type: string
                    pipeline:
                      items:
                        properties:
                          env:
                            items:
                              properties:
                                name:
                                  type: string
                                value:
                                  type: string
                              required:
                              - name
                              - value
                              type: object
                            type: array
                          runcommand:
                            type: string
                          secrets:
                            items:
                              oneOf:
                              - required:
                                - AmeSecret
                              - required:
                                - VaultSecret
                              properties:
                                AmeSecret:
                                  properties:
                                    envkey:
                                      type: string
                                    name:
                                      type: string
                                  required:
                                  - envkey
                                  - name
                                  type: object
                                VaultSecret:
                                  properties:
                                    envkey:
                                      type: string
                                    secretKey:
                                      type: string
                                    secretPath:
                                      type: string
                                    vaultName:
                                      type: string
                                  required:
                                  - envkey
                                  - secretKey
                                  - secretPath
                                  - vaultName
                                  type: object
                              type: object
                            type: array
                          taskname:
                            type: string
                        required:
                        - env
                        - runcommand
                        - secrets
                        - taskname
                        type: object
                      nullable: true
                      type: array
                    projectid:
                      nullable: true
                      type: string
                    resources:
                      additionalProperties:
                        description: |-
                          Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

                          The serialization format is:

                          <quantity>        ::= <signedNumber><suffix>
                            (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                          <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                            (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                          <decimalSI>       ::= m | "" | k | M | G | T | P | E
                            (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                          <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                          No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                          When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                          Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                            a. No precision is lost
                            b. No fractional digits will be emitted
                            c. The exponent (or suffix) is as large as possible.
                          The sign will be omitted unless the number is negative.

                          Examples:
                            1.5 will be serialized as "1500m"
                            1.5Gi will be serialized as "1536Mi"

                          Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                          Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                          This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                        type: string
                      nullable: true
                      type: object
                    runcommand:
                      nullable: true
                      type: string
                    secrets:
                      items:
                        oneOf:
                        - required:
                          - AmeSecret
                        - required:
                          - VaultSecret
                        properties:
                          AmeSecret:
                            properties:
                              envkey:
                                type: string
                              name:
                                type: string
                            required:
                            - envkey
                            - name
                            type: object
                          VaultSecret:
                            properties:
                              envkey:
                                type: string
                              secretKey:
                                type: string
                              secretPath:
                                type: string
                              vaultName:
                                type: string
                            required:
                            - envkey
                            - secretKey
                            - secretPath
                            - vaultName
                            type: object
                        type: object
                      nullable: true
                      type: array
                    source:
                      nullable: true
                      properties:
                        amestoragepath:
                          nullable: true
                          type: string
                        gitreference:
                          nullable: true
                          type: string
                        gitrepository:
                          nullable: true
                          type: string
                      type: object
                    taskRef:
                      nullable: true
                      type: string
                    taskType:
                      enum:
                      - PipEnv
                      - Mlflow
                      nullable: true
                      type: string
                    templateRef:
                      nullable: true
                      type: string
                  type: object
                nullable: true
                type: array
            required:
            - projectid
            type: object
          status:
            nullable: true
            properties:
              models:
                additionalProperties:
                  properties:
                    lastDeployed:
                      description: Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
                      format: date-time
                      nullable: true
                      type: string
                    lastTrained:
                      description: Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
                      format: date-time
                      nullable: true
                      type: string
                    latestModelVersion:
                      description: Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
                      format: date-time
                      nullable: true
                      type: string
                    latestValidModelVersion:
                      nullable: true
                      type: string
                    latestValidatedModelVersion:
                      nullable: true
                      type: string
                    validation:
                      nullable: true
                      oneOf:
                      - required:
                        - unValidated
                      - required:
                        - validating
                      - required:
                        - failedValidation
                      - required:
                        - validated
                      properties:
                        failedValidation:
                          properties:
                            model_version:
                              type: string
                          required:
                          - model_version
                          type: object
                        unValidated:
                          type: object
                        validated:
                          properties:
                            model_version:
                              type: string
                          required:
                          - model_version
                          type: object
                        validating:
                          properties:
                            model_version:
                              type: string
                            task:
                              type: string
                          required:
                          - model_version
                          - task
                          type: object
                      type: object
                  type: object
                nullable: true
                type: object
            type: object
        required:
        - spec
        title: Project
        type: object
    served: true
    storage: true
    subresources:
      status: {}
