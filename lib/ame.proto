syntax = "proto3";

package ame.v1 ;

message TaskIdentifier {
  string name = 1;
}

enum TaskType {
  Pipenv = 0;
  Mlflow = 1;
  Poetry = 2;
}

message Empty {
}

message ProjectFileIdentifier {
  string taskid= 1;
  string filepath = 2;
}

message FileChunk {
  bytes contents = 1;
}

message TaskProjectDirectoryStructure {
  string projectid = 1;
  TaskIdentifier taskid = 2; 
  repeated string paths = 3;
}

message ProjectFileChunk {
  oneof messages {
    FileChunk chunk = 1;
    ProjectFileIdentifier identifier = 2;
  }
}

message TaskLogRequest {
  TaskIdentifier taskid = 1;
  optional int32 start_from = 2;
  optional bool watch = 3;
}

message LogEntry {
  bytes contents = 1;
}

message ProjectSourceCfg {
  optional GitProjectSource git = 1;
}

message GitProjectSource {
  string repository = 1;
  optional string username = 2;
  optional string secret = 3;
  optional string sync_interval = 4;
}

enum ProjectSourceState {
  Pending = 0;
  Synchronising = 1;
  Synchronized = 2;
  Error = 3;
}

enum ProjectSourceIssueType {
  Unknown = 0;
  AuthFailure = 1;
  RepositoryNotFound = 2;
  AmeProjectNotFound = 3;
  GitSecretNotFound = 4;
}

message ProjectSourceStatus {
  optional string last_synced = 1;
  ProjectSourceState state = 2;
  optional string reason = 3;
  repeated ProjectSourceIssue issues = 4;
}

message ProjectSourceIssue {
  ProjectSourceIssueType issue_type = 1;
  optional string explanation = 2;
}

message ProjectSourceId {
  string name = 1;
}

message TrainRequest {
  string projectid = 1;
  string model_name = 2;
}

// This is a secret stored by AME
message AmeSecret {
  string key = 1;
  string value = 2;
}

message AmeSecretId {
  string key = 1;
}

message AmeSecrets {
repeated AmeSecretId secrets = 1;
}

message ResourceCfg {
  oneof cfg {
    ProjectSourceCfg projectSrcCfg = 1;
  }
}

message ResourceId {
  oneof id {
    ProjectSourceId projectSrcId = 1;
  }
}


message ProjectSourceListParams {}

message ResourceListParams {
  oneof params {
    ProjectSourceListParams projectSourceListParams = 1;
  }
}

message ResourceIds {
  repeated ResourceId ids = 1;
}

message ListProjectSrcsResponse {
  repeated ProjectSourceCfg cfgs = 2;
}

message ProjectSrcPatchRequest {
  ProjectSourceId id = 1;
  ProjectSourceCfg cfg = 2;
}

message ProjectSrcIdRequest {
  string repo = 1;
}

message TaskRef {
  string name = 1;
  optional string project = 2;
}

message TaskCfg {
  optional string name = 1;
  optional TaskRef taskRef = 2;  
  map<string, string> resources = 3;
  oneof executor {
    PoetryExecutor poetry = 4; 
    MlflowExecutor mlflow = 5;
    PipEnvExecutor pipEnv = 6;
    PipExecutor pip = 8;
    CustomExecutor custom = 9;
  }
  repeated string dataSets = 7;
  optional TemplateRef fromTemplate = 10;
  optional ArtifactCfg artifactCfg = 11;
  optional TriggerCfg triggers = 12;
  repeated EnvVar env = 13;
  repeated Secret secrets = 14;
}

message Secret {
  oneof variant {
    AmeSecretVariant ame = 1;
  }
}

message AmeSecretVariant {
  string key = 1;
  string injectAs = 2;
}

message EnvVar {
  string key = 1;
  string val = 2;
}

message TriggerCfg {
  optional string schedule = 1;
}

message ArtifactCfg {
  bool save_changed_files = 1;
  repeated string paths = 2; 
}

message TemplateRef {
  string name = 1;
  optional string project = 2;
}

message CustomExecutor {
  string pythonVersion = 1;
  string command = 2;
}

message PoetryExecutor {
  string pythonVersion = 1;  
  string command = 2;
}


message PipExecutor {
  string pythonVersion = 1;  
  string command = 2;
}

message MlflowExecutor {
  
}

message PipEnvExecutor {
  string command = 1;
}

// TODO: should there be an error case?
message TaskStatus {
  oneof phase {
    TaskPhasePending pending = 2;  
    TaskPhaseRunning running = 3;
    TaskPhaseFailed failed = 4;
    TaskPhaseSucceeded succeeded= 5;
  }
}

message TaskPhasePending {
  
}

message TaskPhaseRunning {
  string workflowName= 1;
}
message TaskPhaseFailed {
  string workflowName= 1;
}
message TaskPhaseSucceeded {
  string workflowName= 1;
}

message DataSetCfg {
 string name = 1;
 TaskCfg  task = 2;
 string path = 3;
 optional string size = 4;
}

message ProjectCfg {
  string name = 1;
  repeated Model models = 2;
  repeated DataSetCfg dataSets = 3;
  repeated TaskCfg tasks = 4;
  repeated TaskCfg templates = 5;
  optional bool enableTriggers = 6;
}

message ProjectStatus {
  map<string,ModelStatus> models = 1;
}

message ModelStatus {
  optional string latestValidatedModelVersion = 1;
}

message CreateProjectRequest {
  ProjectCfg cfg = 1;
  optional bool enableTriggers = 2;
}

message ProjectId {
  string name = 1;
}

message Model {
  string name = 1;
  optional TaskCfg validationTask = 2; 
  optional ModelTrainingCfg training = 3;
  optional ModelDeploymentCfg deployment = 4;
}

message ModelTrainingCfg {
  TaskCfg task = 1;
}

message ModelDeploymentCfg {
   map<string, string> ingressAnnotations = 1;
   optional int32 replicas = 2;
   optional string image = 3;
   map<string,string> resources = 4;
   optional bool enableTls = 5;
}

message RunTaskRequest {
  ProjectId projectId= 1;
  TaskCfg taskCfg = 2;
}

message TaskId {
  string name = 1;
}

message ListTasksRequest {
  
}

message ListTasksResponse {
  map<string, TaskListEntry> tasks = 1;
}

message TaskListEntry {
  TaskStatus status = 1;
  string timeStamp = 2;
}

message RemoveTaskRequest {
  string name = 1;
  optional bool approve = 2;
}

service AmeService {
  rpc RunTask(RunTaskRequest) returns (TaskIdentifier) {}
  rpc GetTask(TaskIdentifier) returns (TaskCfg) {}
  rpc DeleteTask(TaskIdentifier) returns (Empty) {}
  rpc CreateTaskProjectDirectory(TaskProjectDirectoryStructure) returns (Empty) {}
  rpc UploadProjectFile(stream ProjectFileChunk) returns (Empty) {}
  rpc StreamTaskLogs(TaskLogRequest) returns (stream LogEntry) {}
  rpc CreateProjectSrc(ProjectSourceCfg) returns (ProjectSourceId) {}
  rpc DeleteProjectSrc(ProjectSourceId) returns (Empty) {}
  rpc TrainModel(TrainRequest) returns (Empty) {}
  rpc WatchProjectSrc(ProjectSourceId) returns (stream ProjectSourceStatus) {}
  rpc CreateSecret(AmeSecret) returns (Empty) {}
  rpc DeleteSecret(AmeSecretId) returns (Empty) {}
  rpc ListSecrets(Empty) returns (AmeSecrets) {} 
  rpc UpdateProjectSrc(ProjectSrcPatchRequest) returns (Empty) {}
  rpc CreateResource(ResourceCfg) returns (ResourceId) {}
  rpc ListResource(ResourceListParams) returns (ResourceIds) {}
  rpc GetProjectSrcCfg(ProjectSourceId) returns (ProjectSourceCfg) {}
  rpc GetProjectSrcStatus(ProjectSourceId) returns (ProjectSourceStatus) {}
  rpc GetProjectSrcId(ProjectSrcIdRequest) returns (ProjectSourceId) {}
  rpc ListProjectSrcs(ProjectSourceListParams) returns (ListProjectSrcsResponse) {} 
  rpc CreateProject(CreateProjectRequest) returns (ProjectId) {}
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {}
  rpc RemoveTask(RemoveTaskRequest) returns (Empty) {}
 }
